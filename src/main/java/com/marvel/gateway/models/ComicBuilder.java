/*
 * MarvelComicsLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 09/14/2016
 */
package com.marvel.gateway.models;

import java.util.*;

public class ComicBuilder {
    //the instance to build
    private Comic comic;

    /**
     * Default constructor to initialize the instance
     */
    public ComicBuilder() {
        comic = new Comic();
    }

    /**
     * A resource list containing the characters which appear in this comic.
     */
    public ComicBuilder characters(CharacterList characters) {
        comic.setCharacters(characters);
        return this;
    }

    /**
     * A list of issues collected in this comic (will generally be empty for periodical formats such as "comic" or "magazine").
     */
    public ComicBuilder collectedIssues(List<ComicSummary> collectedIssues) {
        comic.setCollectedIssues(collectedIssues);
        return this;
    }

    /**
     * A list of collections which include this comic (will generally be empty if the comic's format is a collection).
     */
    public ComicBuilder collections(List<ComicSummary> collections) {
        comic.setCollections(collections);
        return this;
    }

    /**
     * A resource list containing the creators associated with this comic.
     */
    public ComicBuilder creators(CreatorList creators) {
        comic.setCreators(creators);
        return this;
    }

    /**
     * A list of key dates for this comic.
     */
    public ComicBuilder dates(List<ComicDate> dates) {
        comic.setDates(dates);
        return this;
    }

    /**
     * The preferred description of the comic.
     */
    public ComicBuilder description(String description) {
        comic.setDescription(description);
        return this;
    }

    /**
     * The Diamond code for the comic.
     */
    public ComicBuilder diamondCode(String diamondCode) {
        comic.setDiamondCode(diamondCode);
        return this;
    }

    /**
     * The ID of the digital comic representation of this comic. Will be 0 if the comic is not available digitally.
     */
    public ComicBuilder digitalId(int digitalId) {
        comic.setDigitalId(digitalId);
        return this;
    }

    /**
     * The EAN barcode for the comic.
     */
    public ComicBuilder ean(String ean) {
        comic.setEan(ean);
        return this;
    }

    /**
     * A resource list containing the events in which this comic appears.
     */
    public ComicBuilder events(EventList events) {
        comic.setEvents(events);
        return this;
    }

    /**
     * The publication format of the comic e.g. comic, hardcover, trade paperback.
     */
    public ComicBuilder format(String format) {
        comic.setFormat(format);
        return this;
    }

    /**
     * The unique ID of the comic resource.
     */
    public ComicBuilder id(int id) {
        comic.setId(id);
        return this;
    }

    /**
     * A list of promotional images associated with this comic.
     */
    public ComicBuilder images(List<Image> images) {
        comic.setImages(images);
        return this;
    }

    /**
     * The ISBN for the comic (generally only populated for collection formats).
     */
    public ComicBuilder isbn(String isbn) {
        comic.setIsbn(isbn);
        return this;
    }

    /**
     * The ISSN barcode for the comic.
     */
    public ComicBuilder issn(String issn) {
        comic.setIssn(issn);
        return this;
    }

    /**
     * The number of the issue in the series (will generally be 0 for collection formats).
     */
    public ComicBuilder issueNumber(int issueNumber) {
        comic.setIssueNumber(issueNumber);
        return this;
    }

    /**
     * The date the resource was most recently modified.
     */
    public ComicBuilder modified(Date modified) {
        comic.setModified(modified);
        return this;
    }

    /**
     * The number of story pages in the comic.
     */
    public ComicBuilder pageCount(int pageCount) {
        comic.setPageCount(pageCount);
        return this;
    }

    /**
     * A list of prices for this comic.
     */
    public ComicBuilder prices(List<ComicPrice> prices) {
        comic.setPrices(prices);
        return this;
    }

    /**
     * The canonical URL identifier for this resource.
     */
    public ComicBuilder resourceURI(String resourceURI) {
        comic.setResourceURI(resourceURI);
        return this;
    }

    /**
     * A summary representation of the series to which this comic belongs.
     */
    public ComicBuilder series(SeriesSummary series) {
        comic.setSeries(series);
        return this;
    }

    /**
     * A resource list containing the stories which appear in this comic.
     */
    public ComicBuilder stories(StoryList stories) {
        comic.setStories(stories);
        return this;
    }

    /**
     * A set of descriptive text blurbs for the comic.
     */
    public ComicBuilder textObjects(List<TextObject> textObjects) {
        comic.setTextObjects(textObjects);
        return this;
    }

    /**
     * The representative image for this comic.
     */
    public ComicBuilder thumbnail(Thumbnail thumbnail) {
        comic.setThumbnail(thumbnail);
        return this;
    }

    /**
     * The canonical title of the comic.
     */
    public ComicBuilder title(String title) {
        comic.setTitle(title);
        return this;
    }

    /**
     * The UPC barcode number for the comic (generally only populated for periodical formats).
     */
    public ComicBuilder upc(String upc) {
        comic.setUpc(upc);
        return this;
    }

    /**
     * A set of public web site URLs for the resource.
     */
    public ComicBuilder urls(List<Url> urls) {
        comic.setUrls(urls);
        return this;
    }

    /**
     * If the issue is a variant (e.g. an alternate cover, second printing, or directorâ€™s cut), a text description of the variant.
     */
    public ComicBuilder variantDescription(String variantDescription) {
        comic.setVariantDescription(variantDescription);
        return this;
    }

    /**
     * A list of variant issues for this comic (includes the "original" issue if the current issue is a variant).
     */
    public ComicBuilder variants(List<ComicSummary> variants) {
        comic.setVariants(variants);
        return this;
    }
    /**
     * Build the instance with the given values
     */
    public Comic build() {
        return comic;
    }
}